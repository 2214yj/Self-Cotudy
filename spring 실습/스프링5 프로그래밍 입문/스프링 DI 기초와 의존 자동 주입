2.스프링은 객체 컨테이너
스프링의 핵심 기능은 객체를 생성하고 초기화하는 것이다.

ApplicationContext(또는 BeanFactory)는 빈 객체의 생성, 초기화, 보관, 제거 등을 관리하고 있어서 ApplicationContext를 스프링 컨테이너라고도 부른다.
스프링 컨테이너는 내부적으로 빈 객체와 빈 이름을 연결하는 정보를 갖는다. 이름과 실제 객체의 관계뿐만 아니라 샐제 객체의 생성, 초기화, 의존 주입 등 스프링 컨테이너는 객체 관리를 위한 다양한 기능을 제공한다.

2.1. 싱글톤 객체
별도의 설정을 하지 않을 경우 스프링은 한 개의 빈 객체만을 생성하며, 이때 빈 객체는 '싱글톤 범위를 갖는다'고 표현한다.
싱글톤은 단일 객체를 의미하는 단어로서 스프링은 기본적으로 한 개의 @Bean 어노테이션에 대해 한 개의 빈 객체를 생성한다.


CH03. 스프링 DI
1. 의존이란?
DI는 'Dependency Injection'의 약자로 우리말로는 '의존 주입'이라고 번역한다. 여기서 말하는 의존은 객체 간의 의존을 의미한다.
의존하는 대상이 있으면 그 대상을 구하는 방법이 필요하다. 가장 쉬운 방법은 의존 대상 객체를 직접 생성하는 것이다.
클래스 내부에서 직접 의존 객체를 생성하는 것이 쉽긴 하지만 유지보수의 관점에서 문제점을 유발할 수 있다.
의존 객체를 구하는 또 다른 방법으로는 DI와 서비스 로케이터가 있다. 이 중 스프링과 관련된 것은 DI이다.

2. DI를 통한 의존 처리
DI는 의존하는 객체를 직접 생성하는 대신 의존 객체를 전달받는 방식을 사용한다.
의존 객체를 직접 생성하지 않는 대신, 생성자를 통해서 의존 객체를 전달 받는다. 즉, 생성자를 통해 의존하고 있는 객체를 주입 받은 것이다.

3. DI와 의존 객체 변경의 유연함
DI를 사용하면 추후에 의존 객체가 바뀌더라도 변경할 곳은 의존 주입 대상이 되는 객체를 생성하는 코드 한 곳뿐이다.

6. 스프링의 DI 설정
스프링이 DI를 지원하는 조립기이다. 실제스프링은 앞서 구현한 조립기와 유사한 기능을 제공한다.
즉 스프링은 Assembler 클래스의 생성자 코드처럼 필요한 객체를 생성하고 생성한 객체에 의존을 주입한다. 또한 스프링은 Assembler.getMemberRegisterService() 메서드처럼 객체를 제공하는 기능을 정의하고 있다.

6.1. 스프링을 이용한 객체 조립과 사용
스프링 설정 클래스를 의미하는 @Configuration 어노테이션, 스프링 빈 객체를 생성하는 @Bean 어노테이션을 사용하여 스프링 컨테이너를 설정하고
AnnotationConfigApplicationContext 클래스를 이용해서 스프링 컨테이너를 생성할 수 있다. 컨테이너를 생성하면 getBean() 메서드를 이용해서 사용할 객체를 구할 수 있다.

6.2. DI 방식 1 : 생성자 방식

6.3. DI 방식 2 : 세터 메서드 방식

7. @Configuration 설정 클래스의 @Bean 설정과 싱글톤
스프링 컨테이너는 @Bean이 붙은 메서드에 대해 한 개의 객체만 생성한다. 이는 다른 설정 메서드에서 memberDao()를 몇 번을 호출하더라도 항상 같은 객체를 리턴한다는 것을 의미한다.
이게 어떻게 가능할까? 스프링은 설정 클래스를 그대로 사용하지 않는다. 대신 설정 클래스를 상속한 새로운 설정 클래스를 만들어서 사용한다.
스프링이 런타임에 생성한 설정 클래스는 한 번 생성한 객체를 보관했다가 후에 동일한 객체를 리턴하는 방식으로 동작한다.

8. 두 개 이상의 설정 파일 사용하기
8.1. @Configuration 어노테이션, @Autowired 어노테이션

8.2. @Import 어노테이션 사용

9. getBean() 메서드 사용
getBean() 메서드의 첫 번째 인자는 빈의 이름이고 두 번째 인자는 빈의 타입이다.
빈의 이름이나 타입이 다르면 Exception 발생한다.
빈의 이름을 지정하지 않고 타입만으로도 빈을 구할 수도 있다. 이 때 해당 타입의 빈 객체가 한 개만 존재하면 해당 빈을 구해서 리턴한다.

10. 주입 대상 객체를 모두 빈 객체로 설정해야 하나?
주입할 객체가 꼭 스프링 빈이어야 할 필요는 없다. 객체를 스프링 빈으로 등록할 때와 등록하지 않을 때의 차이는 스프링 컨테이너가 객체를 관리하는지 여부이다.
스프링 빈으로 등록하지 않았으므로 스프링 컨테이너에서 getBean 메서드를 통해 구할 수 없다.
스프링 컨테이너는 자동 주입, 라이프사이클 관리 등 단순 객체 생성 외에 객체 관리를 위한 다양한 기능을 제공하는 데 빈으로 등록한 객체레만 기능을 적용한다.
짜라서, 스프링 컨테이너가 제공하는 관리 기능이 필요 없고 getBean() 메서드로 구할 필요가 없다면 빈 객체로 꼭 등록해야 하는 것은 아니다.


CH04. 의존 자동 주입
의존 대상을 설정 코드에서 직접 주입하지 않고 스프링이 자동으로 의존하는 빈 객체를 주입해주는 기능도 있다. 이를 자동 주입이라고 한다.
스프링에서 의존 자동 주입을 설정하려면 @Autowired 어노테이션이나 @Resource 어노테이션을 사용하면 된다.

2. @Autowired 어노테이션을 이용한 의존 자동 주입
자동 주입 기능을 사용하면 스프링이 알아서 의존 객체를 찾아서 주입한다. 의존을 주입할 대상에 @Autowired 어노테이션을 붙이기만 하면 된다.
@Autowired 어노테이션을 붙이면 설정 클래스에서 의존을 주입하지 않아도 된다. 필드에 @Autowired 어노테이션이 붙어 있으면 스프링이 해당 타입의 빈 객체를 찾아서 필드에 할당한다.
@Autowired 어노테이션은 메서드에도 붙일 수 있다. @Autowired 어노테이션을 필드나 세터 메서드에 붙이면 스프링은 타입이 일치하는 빈 객체를 찾아서 주입한다.

3. @Qualifier 어노테이션을 이용한 의존 객체 선택
자동 주입 가능한 빈이 두 개 이상이면 자동 주입할 빈을 지정할 수 있는 방법이 필요하다. @Qualifier 어노테이션을 사용하면 자동 주입 대상 빈을 한정할 수 있다.
