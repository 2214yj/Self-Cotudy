Day 02
<오늘 푼 문제>
반복문: 2739, 10950, 8393, 15552, 2741, 2742, 11021, 1022, 2438, 2439, 10871, 10952, 10952, 1110
1차원 배열:  10818, 2562, 2577, 3052, 1546, 8958, 4344
함수: 15596, 4673, 1065

<오늘의 궁금증>
Q. exec이 무엇인가?

Q. 리스트컴프리핸션을 사용해서 곧바로 리스트로 만들어서 *을 사용하여 print()하는 것이 좋을까?
아니면 'for i in 리스트' 표현을 사용하여 for문 안에서 print()하는 것이 좋을까?

Q. print(a,b,sep='')과 print(a+b) 중에 어느 것이 더 좋은 표현일까?

Q. sum(A,B) 와 A+B 중에서 뭐가 더 빠를까?

<오늘의 발견>
1. [숏코딩] 입력 받은 수만큼 for 돌리는 법
for i in [0] * int(input()):
    ...

2. [숏코딩] 입력 받은 두 수의 합을 곧바로 구하는 법
print(sum(map(int,input().split())))

3. 리스트 출력
print(*리스트명)

4. 문자열에서 칸 지정하고 정렬하여 출력하기
    4.1. 서식 지정
        print('%20s', str)  //20칸 중 오른쪽으로 정렬된 str이 출력된다.
        print('%-20s', str) //20칸 중 왼쪽으로 정렬된 str이 출력된다.

    4.2. rjust,ljust, zfill 함수
        문자열.rjust(전체 자리 숫자, 공백이 있을 경우 공백을 채울 텍스트)   //오른쪽 정렬
        문자열.ljust(전체 자리 숫자, 공백이 있을 경우 공백을 채울 텍스트)   //왼쪽 정렬
        문자열.zfill(전체 자리 숫자)                                //문자열 포함 원하는 길이만큼 기존 문자열 왼쪽으로 0('Z'ero)을 채워주는(fill) 함수

        ex) "77".rjust(5, "0")      //0007
        ex) "222".ljust(15, "a")    //222aaaaaaaaaaaa
        ex) "123".zfill(5)          //00123

5. [숏코딩] 바다코끼리 연산자 :=
바다코끼리를 닮아서 바다코끼리 연산자라고 불린다. 파이썬 3.8 이상에서 사용 가능.
더 큰 표현식의 일부로 변수에 값을 대입한다. 원래 사용하던 식에 :=를 사용하여 값을 대입함으로써 2줄의 코드를 1줄로 줄여주는 효과를 가진다.
ex) if (n := len(a)) > 10:

6. 반복문의 종료 시점이 0과 관련된 문제일 경우, while 반복문의 조건에서 이를 활용하면 좋다.

7. f-string은 print문 외에도 문자열로 만들어야 하는 경우에 활용하자.
ex) a*b*c의 값을 문자열로 만들어야 하는 경우 f'{a*b*c}'

8. map() 함수 주의사항
map() 함수는 map 타입으로 결과를 리턴한다

9. 평균 구하기의 경우, 전체 sum()한 것에다가 n을 나눠주기

10. 서식 출력할 때 %를 출력하고 싶으면 %를 두 개 써야 된다!
ex) print('%.3f%%' % 0.12345)

11. f-string 포맷팅 문자열 정렬, 소수점 자릿수 지정하는 방법
    11.1. 글자 수를 지정하여 문자열을 정렬
        f-string의 중괄호{} 안에서 :구분자를 이용한다.
        : 구분자 왼쪽은 문자나 숫자를, 오른쪽엔 정렬 기호와 숫자, 서식 지정자 알파벳을 써준다.
        가운데 정렬 기호 ^, 오른쪽 정렬 기호 >를 사용하여 가운데, 오른쪽 정렬이 가능하다. (default로 왼쪽 정렬)
        ex) print(f'{name:5s}의 나이는 {age:^7d}세 이다.')     # 왼쪽 정렬, 가운데 정렬
        => 보라   의 나이는   8   세 이다.

    11.2. 소수점 자릿수 지정
        중괄호 {} 안에서 : 구분자를 이용하고 : 구분자 오른편에. 자릿수 f를 써준다.
        ex) print(f'둘째자리까지 표현 {x:.2f}')
        => 둘째자리까지 표현 0.56

12. 문자열 함수 index와 find의 차이
index는 찾는 문자나 문자열이 없을 경우 ValueError 발생
find는 찾는 문자나 문자열이 없을 경우 -1을 리턴
또한 index는 문자열과 리스트에서 모두 사용 가능하지만 find는 문자열에서만 사용 가능하다.


참고 자료
https://www.crocus.co.kr/1660
https://ooyoung.tistory.com/87